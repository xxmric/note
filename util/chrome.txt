Chrome控制台使用详解:

	一、console.log

		大家都会用log，但鲜有人很好地利用console.error , console.warn 等将输出到控制台的信息进行分类整理。
		他们功能区别不大，意义在于将输出到控制台的信息进行归类，或者说让它们更语义化。
		各个所代表的语义如下：

		console.log：普通信息
		console.info：提示类信息
		console.error：错误信息
		console.warn：警示信息
		
		当合理使用上述log方法后，可以很方便地在控制台选择查看特定类型的信息。
			eg:console.log('一颗红心向太阳','吼吼~'); console.info('楼上药不能停！'); console.warn('楼上嘴太贱！'); console.error('楼上关你毛事？');

		如果再配合console.group 与console.groupEnd，可以将这种分类管理的思想发挥到极致。这适合于在开发一个规模很大模块很多很复杂的Web APP时，将各自的log信息分组到以各自命名空间为名称的组里面。
			eg:console.group("app.foo"); console.log("来自foo模块的信息 blah blah blah..."); console.groupEnd(); console.group("app.bar"); console.log("来自bar模块的信息 blah blah blah..."); console.groupEnd();
			
		除此，console.table 更是直接以表格的形式将数据输出，不能赞得太多！
			eg:var data = [{'品名': '杜雷斯', '数量': 4}, {'品名': '冈本', '数量': 3}]; console.table(data);
	
	二、console.assert

		当你想代码满足某些条件时才输出信息到控制台，那么你大可不必写if或者三元表达式来达到目的，cosole.assert便是这样场景下一种很好的工具，它会先对传入的表达式进行断言，只有表达式为假时才输出相应信息到控制台。
			eg:var isDebug=false; console.assert(isDebug,'开发中的log信息。。。');
			
	三、console.count

		除了条件输出的场景，还有常见的场景是计数。
		当你想统计某段代码执行了多少次时也大可不必自己去写相关逻辑，内置的console.count可以很地胜任这样的任务。

		function foo(){ //其他函数逻辑blah blah。。。 
			console.count('foo 被执行的次数：'); 
		} 
		foo(); foo(); foo();
		
	四、console.dir

		将DOM结点以JavaScript对象的形式输出到控制台
		而console.log是直接将该DOM结点以DOM树的结构进行输出，与在元素审查时看到的结构是一致的。不同的展现形式，同样的优雅，各种体位任君选择反正就是方便与体贴。
			eg:console.dir(document.body); console.log(document.body);
			
	五、console.time & console.timeEnd

		输出一些调试信息是控制台最常用的功能，当然，它的功能远不止于此。当做一些性能测试时，同样可以在这里很方便地进行。
		比如需要考量一段代码执行的耗时情况时，可以用console.time与 console.timeEnd来做此事。

			eg:	console.time("Array initialize");//开始标志
				var array= new Array(1000000); 
				for (var i = array.length - 1; i >= 0; i--) {
					array[i] = new Object(); 
				}; 
				console.timeEnd("Array initialize");//结束时间
				
	六、monitor & unmonitor

		monitor(function)，它接收一个函数名作为参数，比如function a,每次a被执行了，都会在控制台输出一条信息，里面包含了函数的名称a及执行时所传入的参数。

		而unmonitor(function)便是用来停止这一监听。

		function sayHello(name){
			alert('hello,'+name); 
		} 
		monitor(sayHello);//监听sayHello函数传参情况
		sayHello('wayou');
		unmonitor(sayHello);//取消监听
		sayHello('wayou');
		
Chrome快捷键步骤/方法:
1
Chrome窗口和标签页快捷键：Ctrl+Shift+C;快速选中当前元素
Ctrl+N 打开新窗口 
Ctrl+T 打开新标签页 
Ctrl+Shift+N 在隐身模式下打开新窗口 
Ctrl+O，然后选择文件 在谷歌浏览器中打开计算机上的文件 
按住 Ctrl 键，然后点击链接 从后台在新标签页中打开链接，但您仍停留在当前标签页中 
按住 Ctrl+Shift 键，然后点击链接 在新标签页中打开链接，同时切换到新打开的标签页 
按住 Shift 键，然后点击链接 在新窗口中打开链接 
Alt+F4 关闭当前窗口 
Ctrl+Shift+T 重新打开上次关闭的标签页。谷歌浏览器可记住最近关闭的 10 个标签页。 
将链接拖动到标签页内 在指定标签页中打开链接 
将链接拖动到两个标签页之间 在标签页横条的指定位置建立一个新标签页，在该标签页中打开链接 
Ctrl+1 到 Ctrl+8 切换到指定位置编号的标签页。您按下的数字代表标签页横条上的相应标签位置。 
Ctrl+9 切换到最后一个标签页 
Ctrl+Tab 或 Ctrl+PgDown 切换到下一个标签页 
Ctrl+Shift+Tab 或 Ctrl+PgUp 切换到上一个标签页 
Ctrl+W 或 Ctrl+F4 关闭当前标签页或弹出式窗口 
Alt+Home 打开主页
2
Chrome地址栏快捷键
在地址栏，进行下列操作之一： 
键入搜索字词 使用默认搜索引擎进行搜索 
键入网址中”www.”和”.com”之间的部分，然后按 
Ctrl+Enter 键 为您在地址栏中输入的内容添加”www.”和”.com”，然后打开网址 
键入搜索引擎关键字或网址，按 Tab键，然后键入搜索字词 使用与关键字或网址相关联的搜索引擎进行搜索。如果谷歌浏览器可以识别您要使用的搜索引擎，则会提示您按 Tab 键。 
F6 或 Ctrl+L 或 Alt+D 选中网址区域中的内容 
键入网址，然后按 Alt+Enter 键 在新标签页中打开网址 
打开谷歌chrome浏览器各功能的快捷键 
Ctrl+B 打开和关闭书签栏 
Ctrl+Shift+B 打开书签管理器 
Ctrl+H 查看”历史记录”页 
Ctrl+J 查看”下载”页 
Shift+Escape 查看任务管理器 
Shift+Alt+T 将焦点设置在工具栏上。使用键盘上的向右和向左箭头，可导航至工具栏上的不同按钮。
3
Chrome网页快捷键
Ctrl+P 打印当前页 
Ctrl+S 保存当前页 
F5 重新加载当前页 
Esc 停止加载当前页 
Ctrl+F 打开”在网页上查找”框 
点击鼠标中键或滚轮（只在谷歌浏览器测试版（只有英文版）中可用） 激活自动滚动。当您移动鼠标时，网页会根据鼠标的移动方向自动滚动。 
Ctrl+F5 或 Shift+F5 重新加载当前页，但忽略缓存内容 
按住 Alt 键，然后点击链接 下载链接 
Ctrl+G 或 F3 查找与您在”在网页上查找”框中输入的内容相匹配的下一个匹配项 
Ctrl+Shift+G 或 Shift+F3 查找与您在”在网页上查找”框中输入的内容相匹配的上一个匹配项 
Ctrl+U 查看源代码 
将链接拖动到书签栏 将链接加入书签 
Ctrl+D 将当前网页加入书签 
Ctrl++，或者按住 Ctrl 键并向上滚动鼠标滚轮 放大网页上的所有内容 
Ctrl+-，或者按住 Ctrl 键并向下滚动鼠标滚轮 缩小网页上的所有内容 
Ctrl+0 将网页上的所有内容都恢复到正常大小 
选中内容，然后按 Ctrl+C 键 将内容复制到剪贴板 
将光标置于文本字段中，然后按 Ctrl+V 或 Shift+Insert 键 从剪贴板粘贴当前内容 
将光标置于文本字段中，然后按 Ctrl+Shift+V 键 从剪贴板粘贴当前内容的纯文本部分 
选中文字字段中的内容，然后按 Ctrl+X 或 
Shift+Delete 键 删除内容并将其复制到剪贴板
END